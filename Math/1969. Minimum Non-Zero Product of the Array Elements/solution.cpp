/*
 *   這題的重點是如何寫出有效率的pow
 *   參考 : https://leetcode.com/problems/minimum-non-zero-product-of-the-array-elements/solutions/1404343/modpow/
 *
 * 
 *   p = 4, 2^4 - 1 = 15 -> 0b1111
 *   0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111
 *           |_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|______| 0001, 1110
 *                 |_____|_____|_____|_____|_____|_____|_____|_____|_____| 0001, 1110
 *                       |_____|_____|_____|_____|_____|_____|_____| 0001, 1110
 *                             |_____|_____|_____|_____|_____| 0001, 1110
 *                                   |_____|_____|_____| 0001, 1110
 *                                         |_____| 0001, 1110
 *   
 *       (2^p - 1) * (2^p - 2) / 2 * (2^p - 2)
 *       (2^p - 1) * pow(2^p - 2, 2^(p - 1) - 1)
 *   
 *       pow(14, 8) = (14 * 14) * (14 * 14) * (14 * 14) * (14 * 14)
 *                    ---------------------   ---------------------
 *                  =  pow(14, 4) * pow(14, 4)
 */

class Solution {
    int mod = 1e9 + 7;
public:
    int modPow(long long x, long long y)
    {
        if (y == 0)
            return 1;
        long long p = modPow(x, y / 2);
        p = (p * p) % mod;
        return y % 2 ? (p * (x % mod)) % mod : p;
    }
    int minNonZeroProduct(int p) {
        long long cnt = ((1ll << p) - 1) % mod;
        return cnt * modPow(cnt - 1, cnt / 2) % mod;
    }
};
